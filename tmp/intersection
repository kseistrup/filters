#!/bin/sh
# -*- sh -*-

# filters/intersection (2020-01-21)
#
# Print lines common to two files
# Think: FILE1 & FILE2
#
# Copyright ©2020 Klaus Alexander Seistrup <klaus@seistrup.dk>.
# Released under the GNU General Public License v3+.
# Please see https://github.com/kseistrup/filters for details.

ME="${0##*/}"

die () {
  test -n "$*" && {
    echo "$ME: $*" >&2
    exit 1
  }
  exit 0
}

usage () {
  cat << __EOT__
$ME - print lines common to FILE1 and FILE2

Usage: $ME [OPTIONS]
   or: $ME FILE1 [FILE2]

OPTIONS are:

  -h, --help	print this help text and exit

POSITIONAL arguments

  FILE1, FILE2	files to compare

If FILE2 is omitted, or if ‘-’ is used for either FILE1 or FILE2,
$ME will read from standard input (/dev/stdin) instead.

Elements with multiple occurances in any of the files will only
be printed once.
__EOT__
}

case "$1" in
  -h | --help | -help )
    usage
    exit 0
  ;;
esac

file_or_stdin () {
  _file="$1"

  case "$_file" in
    '' | '-' )
      test -c '/dev/stdin' \
      || die 'no such character special: /dev/stdin'
      _file='/dev/stdin'
    ;;
    * )
      test -f "$_file" \
      || die "no such file: $_file"
    ;;
  esac

  # Should we have used readlink?
  echo "$_file"
}

test "$#" -gt 2 && die 'expected at most 2 arguments, got' "$#"

FILE1=$(file_or_stdin "$1")
FILE2=$(file_or_stdin "$2")

# shellcheck disable=SC2016
test "$FILE1" = "$FILE2" && exec awk '{ !seen[$0]++ }' "$FILE1"

# shellcheck disable=SC2016
exec awk '
  # This will only be true while consuming the first file
  NR == FNR { file1[$0] = 1; next }

  # Records from the second file will be processed here
  ++file2[$0] == 1 && ($0 in file1) { print }
' "$FILE1" "$FILE2"

# eof
